%% @author caohongyang
%% @doc 通用接口
%% Created 2013-2-19


-module(tk_misc).
-compile(export_all).
-include("common.hrl").
%% ====================================================================
%% API functions
%% ====================================================================
-export([
         manage_applications/6, 
         start_applications/1,  
         stop_applications/1
		 ]).

-export([
		 send_sock/2,
		 role_procname/1
		]).

-export([random_role_name/1]).

%% 随机男性玩家名字
random_role_name(true) ->
	RandomFamilyNameSeq = random:uniform(data_male_family_name:get(max)),
	FamilyName = data_male_family_name:get(RandomFamilyNameSeq),
	RandomGivenNameSeq  = random:uniform(data_male_given_name:get(max)),
	GivenName = data_male_given_name:get(RandomGivenNameSeq),
	FamilyName++GivenName;
random_role_name(false) ->
	RandomFamilyNameSeq = random:uniform(data_female_family_name:get(max)),
	FamilyName = data_female_family_name:get(RandomFamilyNameSeq),
	RandomGivenNameSeq  = random:uniform(data_female_given_name:get(max)),
	GivenName = data_female_given_name:get(RandomGivenNameSeq),
	FamilyName++GivenName.

%% @doc 生成玩家逻辑进程的注册名称
role_procname(RoleID) ->
	list_to_atom("role"++integer_to_list(RoleID)).

send_sock_no_block(S, Record) when is_tuple(Record)->
    ?DEBUG("send record..~99999p",[Record]),
    case catch proto:encode(Record) of
        {'EXIT',Reason} ->
            ErrStr = io_lib:format("~1000p",[Record]), 
            exit({"cannot encode tuple=",ErrStr, Reason});
        Bin ->
            catch erlang:port_command(S, Bin, [nosuspend])
    end;
send_sock_no_block(S, Bin) ->
    ?DEBUG("send bin..~99999p",[Bin]),
    catch erlang:port_command(S, Bin, [nosuspend]).

send_sock(S, Record) when is_tuple(Record)->
	?DEBUG("send record..~99999p",[Record]),
	case catch proto:encode(Record) of
		{'EXIT',Reason} ->
			ErrStr = io_lib:format("~1000p",[Record]), 
			exit({"cannot encode tuple=",ErrStr, Reason});
		Bin ->
			%ok = 
				gen_tcp:send(S, Bin)
	end;
send_sock(S, Bin) ->
	?DEBUG("send bin..~99999p",[Bin]),
    %ok = 
		gen_tcp:send(S, Bin).

send_sock_force(S, Record) when is_tuple(Record)->
	?DEBUG("send record..~99999p",[Record]),
	case catch proto:encode(Record) of
		{'EXIT',Reason} ->
			ErrStr = io_lib:format("~1000p",[Record]), 
			exit({"cannot encode tuple=",ErrStr, Reason});
		Bin ->
			%erlang:port_command(S, Bin, [force])
			prim_inet:send(S,Bin,[nosuspend])
	end;
send_sock_force(S, Bin) ->
	%erlang:port_command(S, Bin, [force])
	prim_inet:send(S,Bin,[nosuspend]).

%% 向Socket发送消息，利用底层的fun erts_internal:port_command/3
%% 异步的实现方式，当端口忙时就会发送失败并且不会挂起进程，所以不会卡
%% 在需要大量广播不是很重要的消息时可以采用，但要注意处理异步接收到的
%% {inet_reply,S,Status}和{Ref,Res}消息，过滤掉它们而不要输出到日志
send_sock_async(S, Record) when is_tuple(Record) ->
    ?DEBUG("send record..~99999p", [Record]),
    case catch proto:encode(Record) of
        {'EXIT',Reason} ->
            ErrStr = io_lib:format("~1000p", [Record]),
            exit({"cannot encode tuple=",ErrStr,Reason});
        Bin ->
            erts_internal:port_command(S, Bin, [nosuspend])
    end;
send_sock_async(S, Bin) ->
    erts_internal:port_command(S, Bin, [nosuspend]).

manage_applications(Iterate, Do, Undo, SkipError, ErrorTag, Apps) ->
    Iterate(fun (App, Acc) ->
                    case Do(App) of
                        ok -> [App | Acc];
                        {error, {SkipError, _}} -> Acc;
                        {error, Reason} ->
                            lists:foreach(Undo, Acc),
                            throw({error, {ErrorTag, App, Reason}})
                    end
            end, [], Apps),
    ok.

start_applications(Apps) ->
    manage_applications(fun lists:foldl/3,
                        fun application:start/1,
                        fun application:stop/1,
                        already_started,
                        cannot_start_application,
                        Apps).

stop_applications(Apps) ->
    manage_applications(fun lists:foldr/3,
                        fun application:stop/1,
                        fun application:start/1,
                        not_started,
                        cannot_stop_application,
                        Apps).

compile_options(RootDir) ->
	EmakefileName = filename:join([RootDir, "Emakefile"]),
	{ok, [{_,CompileOptions}|_]} = file:consult(EmakefileName),
	lists:map(fun({i,Dir}) ->
					  {i, filename:join([RootDir,Dir])};
				 ({outdir,Dir}) ->
					  {outdir, filename:join([RootDir, Dir])};
				 (E) ->
					  E
			  end, CompileOptions).
					  
	
find_file(Mod,Dir) ->
	FileName = atom_to_list(Mod)++".erl",
	filelib:fold_files(Dir, FileName, true, fun(E,_Acc) -> E end, undefined).

compile(Mod, RootDir) when is_atom(Mod) ->
	File = find_file(Mod, RootDir),
	compile:file(File, compile_options(RootDir)).
	
reduce_data_words() ->
    List = data_words:get(words_list),
    [Head|List2] = 
        lists:foldl(fun(E, Acc) ->
                        case lists:member(E, Acc) of
                            true ->
                                Acc;
                            _ ->
                                [E|Acc]
                        end
                    end, [], List),
    {ok, Out} = file:open("config/data_words.config_new", write),
    file:write(Out, "% 敏感词汇列表\n {words_list,\n\t[\n"),
    lists:foreach(fun(E) ->
                        case is_emoji(E) of
                            false ->
                                file:write(Out, io_lib:format("\t\t\"~s\",\n", [E]));
                            _ ->
                                file:write(Out, io_lib:format("\t\t~w,\n", [E])) 
                        end 
                    end, List2),
    case is_emoji(Head) of
        false ->
            file:write(Out, io_lib:format("\t\t\"~s\"\n\t]\n}.", [Head]));
        _ ->
            file:write(Out, io_lib:format("\t\t~w\n\t]\n}.", [Head])) 
    end,
    file:close(Out).

is_emoji(E) ->
    lists:member(E, 
    [
        [16#F0,16#9F,16#98,16#84],
        [16#F0,16#9F,16#98,16#8A],
        [16#F0,16#9F,16#98,16#83],
        [16#E2,16#98,16#BA],
        [16#F0,16#9F,16#98,16#89],
        [16#F0,16#9F,16#98,16#8D],
        [16#F0,16#9F,16#98,16#98],
        [16#F0,16#9F,16#98,16#9A],
        [16#F0,16#9F,16#98,16#B3],
        [16#F0,16#9F,16#98,16#8C],
        [16#F0,16#9F,16#98,16#81],
        [16#F0,16#9F,16#98,16#9C],
        [16#F0,16#9F,16#98,16#9D],
        [16#F0,16#9F,16#98,16#92],
        [16#F0,16#9F,16#98,16#8F],
        [16#F0,16#9F,16#98,16#93],
        [16#F0,16#9F,16#98,16#94],
        [16#F0,16#9F,16#98,16#9E],
        [16#F0,16#9F,16#98,16#96],
        [16#F0,16#9F,16#98,16#A5],
        [16#F0,16#9F,16#98,16#B0],
        [16#F0,16#9F,16#98,16#A8],
        [16#F0,16#9F,16#98,16#A3],
        [16#F0,16#9F,16#98,16#A2],
        [16#F0,16#9F,16#98,16#AD],
        [16#F0,16#9F,16#98,16#82],
        [16#F0,16#9F,16#98,16#B2],
        [16#F0,16#9F,16#98,16#B1],
        [16#F0,16#9F,16#98,16#A0],
        [16#F0,16#9F,16#98,16#A1],
        [16#F0,16#9F,16#98,16#AA],
        [16#F0,16#9F,16#98,16#B7],
        [16#F0,16#9F,16#91,16#BF],
        [16#F0,16#9F,16#91,16#BD],
        [16#F0,16#9F,16#92,16#9B],
        [16#F0,16#9F,16#92,16#99],
        [16#F0,16#9F,16#92,16#9C],
        [16#F0,16#9F,16#92,16#97],
        [16#F0,16#9F,16#92,16#9A],
        [16#E2,16#9D,16#A4],
        [16#F0,16#9F,16#92,16#94],
        [16#F0,16#9F,16#92,16#93],
        [16#F0,16#9F,16#92,16#98],
        [16#E2,16#9C,16#A8],
        [16#F0,16#9F,16#8C,16#9F],
        [16#F0,16#9F,16#92,16#A2],
        [16#E2,16#9D,16#95],
        [16#E2,16#9D,16#94],
        [16#F0,16#9F,16#92,16#A4],
        [16#F0,16#9F,16#92,16#A8],
        [16#F0,16#9F,16#92,16#A6],
        [16#F0,16#9F,16#8E,16#B6],
        [16#F0,16#9F,16#8E,16#B5],
        [16#F0,16#9F,16#94,16#A5],
        [16#F0,16#9F,16#92,16#A9],
        [16#F0,16#9F,16#91,16#8D],
        [16#F0,16#9F,16#91,16#8E],
        [16#F0,16#9F,16#91,16#8C],
        [16#F0,16#9F,16#91,16#8A],
        [16#E2,16#9C,16#8A],
        [16#E2,16#9C,16#8C],
        [16#F0,16#9F,16#91,16#8B],
        [16#E2,16#9C,16#8B],
        [16#F0,16#9F,16#91,16#90],
        [16#F0,16#9F,16#91,16#86],
        [16#F0,16#9F,16#91,16#87],
        [16#F0,16#9F,16#91,16#89],
        [16#F0,16#9F,16#91,16#88],
        [16#F0,16#9F,16#99,16#8C],
        [16#F0,16#9F,16#99,16#8F],
        [16#E2,16#98,16#9D],
        [16#F0,16#9F,16#91,16#8F],
        [16#F0,16#9F,16#92,16#AA],
        [16#F0,16#9F,16#9A,16#B6],
        [16#F0,16#9F,16#8F,16#83],
        [16#F0,16#9F,16#91,16#AB],
        [16#F0,16#9F,16#92,16#83],
        [16#F0,16#9F,16#91,16#AF],
        [16#F0,16#9F,16#99,16#86],
        [16#F0,16#9F,16#99,16#85],
        [16#F0,16#9F,16#92,16#81],
        [16#F0,16#9F,16#99,16#87],
        [16#F0,16#9F,16#92,16#8F],
        [16#F0,16#9F,16#92,16#91],
        [16#F0,16#9F,16#92,16#86],
        [16#F0,16#9F,16#92,16#87],
        [16#F0,16#9F,16#92,16#85],
        [16#F0,16#9F,16#91,16#A6],
        [16#F0,16#9F,16#91,16#A7],
        [16#F0,16#9F,16#91,16#A9],
        [16#F0,16#9F,16#91,16#A8],
        [16#F0,16#9F,16#91,16#B6],
        [16#F0,16#9F,16#91,16#B5],
        [16#F0,16#9F,16#91,16#B4],
        [16#F0,16#9F,16#91,16#B1],
        [16#F0,16#9F,16#91,16#B2],
        [16#F0,16#9F,16#91,16#B3],
        [16#F0,16#9F,16#91,16#B7],
        [16#F0,16#9F,16#91,16#AE],
        [16#F0,16#9F,16#91,16#BC],
        [16#F0,16#9F,16#91,16#B8],
        [16#F0,16#9F,16#92,16#82],
        [16#F0,16#9F,16#92,16#80],
        [16#F0,16#9F,16#91,16#A3],
        [16#F0,16#9F,16#92,16#8B],
        [16#F0,16#9F,16#91,16#84],
        [16#F0,16#9F,16#91,16#82],
        [16#F0,16#9F,16#91,16#80],
        [16#F0,16#9F,16#91,16#83],
        [16#F0,16#9F,16#8E,16#8D],
        [16#F0,16#9F,16#92,16#9D],
        [16#F0,16#9F,16#8E,16#8E],
        [16#F0,16#9F,16#8E,16#92],
        [16#F0,16#9F,16#8E,16#93],
        [16#F0,16#9F,16#8E,16#8F],
        [16#F0,16#9F,16#8E,16#86],
        [16#F0,16#9F,16#8E,16#87],
        [16#F0,16#9F,16#8E,16#90],
        [16#F0,16#9F,16#8E,16#91],
        [16#F0,16#9F,16#8E,16#83],
        [16#F0,16#9F,16#91,16#BB],
        [16#F0,16#9F,16#8E,16#85],
        [16#F0,16#9F,16#8E,16#84],
        [16#F0,16#9F,16#8E,16#81],
        [16#F0,16#9F,16#94,16#94],
        [16#F0,16#9F,16#8E,16#89],
        [16#F0,16#9F,16#8E,16#88],
        [16#F0,16#9F,16#92,16#BF],
        [16#F0,16#9F,16#93,16#80],
        [16#F0,16#9F,16#93,16#B7],
        [16#F0,16#9F,16#8E,16#A5],
        [16#F0,16#9F,16#92,16#BB],
        [16#F0,16#9F,16#93,16#BA],
        [16#F0,16#9F,16#93,16#B1],
        [16#F0,16#9F,16#93,16#A0],
        [16#E2,16#98,16#8E],
        [16#F0,16#9F,16#92,16#BD],
        [16#F0,16#9F,16#93,16#BC],
        [16#F0,16#9F,16#94,16#8A],
        [16#F0,16#9F,16#93,16#A2],
        [16#F0,16#9F,16#93,16#A3],
        [16#F0,16#9F,16#93,16#BB],
        [16#F0,16#9F,16#93,16#A1],
        [16#E2,16#9E,16#BF],
        [16#F0,16#9F,16#94,16#8D],
        [16#F0,16#9F,16#94,16#93],
        [16#F0,16#9F,16#94,16#92],
        [16#F0,16#9F,16#94,16#91],
        [16#E2,16#9C,16#82],
        [16#F0,16#9F,16#94,16#A8],
        [16#F0,16#9F,16#92,16#A1],
        [16#F0,16#9F,16#93,16#B2],
        [16#F0,16#9F,16#93,16#A9],
        [16#F0,16#9F,16#93,16#AB],
        [16#F0,16#9F,16#93,16#AE],
        [16#F0,16#9F,16#9B,16#80],
        [16#F0,16#9F,16#9A,16#BD],
        [16#F0,16#9F,16#92,16#BA],
        [16#F0,16#9F,16#92,16#B0],
        [16#F0,16#9F,16#94,16#B1],
        [16#F0,16#9F,16#9A,16#AC],
        [16#F0,16#9F,16#92,16#A3],
        [16#F0,16#9F,16#94,16#AB],
        [16#F0,16#9F,16#92,16#8A],
        [16#F0,16#9F,16#92,16#89],
        [16#F0,16#9F,16#8F,16#88],
        [16#F0,16#9F,16#8F,16#80],
        [16#E2,16#9A,16#BD],
        [16#E2,16#9A,16#BE],
        [16#F0,16#9F,16#8E,16#BE],
        [16#E2,16#9B,16#B3],
        [16#F0,16#9F,16#8E,16#B1],
        [16#F0,16#9F,16#8F,16#8A],
        [16#F0,16#9F,16#8F,16#84],
        [16#F0,16#9F,16#8E,16#BF],
        [16#E2,16#99,16#A0],
        [16#E2,16#99,16#A5],
        [16#E2,16#99,16#A3],
        [16#E2,16#99,16#A6],
        [16#F0,16#9F,16#8F,16#86],
        [16#F0,16#9F,16#91,16#BE],
        [16#F0,16#9F,16#8E,16#AF],
        [16#F0,16#9F,16#80,16#84],
        [16#F0,16#9F,16#8E,16#AC],
        [16#F0,16#9F,16#93,16#9D],
        [16#F0,16#9F,16#93,16#96],
        [16#F0,16#9F,16#8E,16#A8],
        [16#F0,16#9F,16#8E,16#A4],
        [16#F0,16#9F,16#8E,16#A7],
        [16#F0,16#9F,16#8E,16#BA],
        [16#F0,16#9F,16#8E,16#B7],
        [16#F0,16#9F,16#8E,16#B8],
        [16#E3,16#80,16#BD],
        [16#F0,16#9F,16#91,16#9F],
        [16#F0,16#9F,16#91,16#A1],
        [16#F0,16#9F,16#91,16#A0],
        [16#F0,16#9F,16#91,16#A2],
        [16#F0,16#9F,16#91,16#95],
        [16#F0,16#9F,16#91,16#94],
        [16#F0,16#9F,16#91,16#97],
        [16#F0,16#9F,16#91,16#98],
        [16#F0,16#9F,16#91,16#99],
        [16#F0,16#9F,16#8E,16#80],
        [16#F0,16#9F,16#8E,16#A9],
        [16#F0,16#9F,16#91,16#91],
        [16#F0,16#9F,16#91,16#92],
        [16#F0,16#9F,16#8C,16#82],
        [16#F0,16#9F,16#92,16#BC],
        [16#F0,16#9F,16#91,16#9C],
        [16#F0,16#9F,16#92,16#84],
        [16#F0,16#9F,16#92,16#8D],
        [16#F0,16#9F,16#92,16#8E],
        [16#E2,16#98,16#95],
        [16#F0,16#9F,16#8D,16#B5],
        [16#F0,16#9F,16#8D,16#BA],
        [16#F0,16#9F,16#8D,16#BB],
        [16#F0,16#9F,16#8D,16#B8],
        [16#F0,16#9F,16#8D,16#B6],
        [16#F0,16#9F,16#8D,16#B4],
        [16#F0,16#9F,16#8D,16#94],
        [16#F0,16#9F,16#8D,16#9F],
        [16#F0,16#9F,16#8D,16#9D],
        [16#F0,16#9F,16#8D,16#9B],
        [16#F0,16#9F,16#8D,16#B1],
        [16#F0,16#9F,16#8D,16#A3],
        [16#F0,16#9F,16#8D,16#99],
        [16#F0,16#9F,16#8D,16#98],
        [16#F0,16#9F,16#8D,16#9A],
        [16#F0,16#9F,16#8D,16#9C],
        [16#F0,16#9F,16#8D,16#B2],
        [16#F0,16#9F,16#8D,16#9E],
        [16#F0,16#9F,16#8D,16#B3],
        [16#F0,16#9F,16#8D,16#A2],
        [16#F0,16#9F,16#8D,16#A1],
        [16#F0,16#9F,16#8D,16#A6],
        [16#F0,16#9F,16#8D,16#A7],
        [16#F0,16#9F,16#8E,16#82],
        [16#F0,16#9F,16#8D,16#B0],
        [16#F0,16#9F,16#8D,16#8E],
        [16#F0,16#9F,16#8D,16#8A],
        [16#F0,16#9F,16#8D,16#89],
        [16#F0,16#9F,16#8D,16#93],
        [16#F0,16#9F,16#8D,16#86],
        [16#F0,16#9F,16#8D,16#85],
        [16#E2,16#98,16#80],
        [16#E2,16#98,16#94],
        [16#E2,16#98,16#81],
        [16#E2,16#9B,16#84],
        [16#F0,16#9F,16#8C,16#99],
        [16#E2,16#9A,16#A1],
        [16#F0,16#9F,16#8C,16#80],
        [16#F0,16#9F,16#8C,16#8A],
        [16#F0,16#9F,16#90,16#B1],
        [16#F0,16#9F,16#90,16#B6],
        [16#F0,16#9F,16#90,16#AD],
        [16#F0,16#9F,16#90,16#B9],
        [16#F0,16#9F,16#90,16#B0],
        [16#F0,16#9F,16#90,16#BA],
        [16#F0,16#9F,16#90,16#B8],
        [16#F0,16#9F,16#90,16#AF],
        [16#F0,16#9F,16#90,16#A8],
        [16#F0,16#9F,16#90,16#BB],
        [16#F0,16#9F,16#90,16#B7],
        [16#F0,16#9F,16#90,16#AE],
        [16#F0,16#9F,16#90,16#97],
        [16#F0,16#9F,16#90,16#B5],
        [16#F0,16#9F,16#90,16#92],
        [16#F0,16#9F,16#90,16#B4],
        [16#F0,16#9F,16#90,16#8E],
        [16#F0,16#9F,16#90,16#AB],
        [16#F0,16#9F,16#90,16#91],
        [16#F0,16#9F,16#90,16#98],
        [16#F0,16#9F,16#90,16#8D],
        [16#F0,16#9F,16#90,16#A6],
        [16#F0,16#9F,16#90,16#A4],
        [16#F0,16#9F,16#90,16#94],
        [16#F0,16#9F,16#90,16#A7],
        [16#F0,16#9F,16#90,16#9B],
        [16#F0,16#9F,16#90,16#99],
        [16#F0,16#9F,16#90,16#A0],
        [16#F0,16#9F,16#90,16#9F],
        [16#F0,16#9F,16#90,16#B3],
        [16#F0,16#9F,16#90,16#AC],
        [16#F0,16#9F,16#92,16#90],
        [16#F0,16#9F,16#8C,16#B8],
        [16#F0,16#9F,16#8C,16#B7],
        [16#F0,16#9F,16#8D,16#80],
        [16#F0,16#9F,16#8C,16#B9],
        [16#F0,16#9F,16#8C,16#BB],
        [16#F0,16#9F,16#8C,16#BA],
        [16#F0,16#9F,16#8D,16#81],
        [16#F0,16#9F,16#8D,16#83],
        [16#F0,16#9F,16#8D,16#82],
        [16#F0,16#9F,16#8C,16#B4],
        [16#F0,16#9F,16#8C,16#B5],
        [16#F0,16#9F,16#8C,16#BE],
        [16#F0,16#9F,16#90,16#9A],
        [16#31,16#E2,16#83,16#A3],
        [16#32,16#E2,16#83,16#A3],
        [16#33,16#E2,16#83,16#A3],
        [16#34,16#E2,16#83,16#A3],
        [16#35,16#E2,16#83,16#A3],
        [16#36,16#E2,16#83,16#A3],
        [16#37,16#E2,16#83,16#A3],
        [16#38,16#E2,16#83,16#A3],
        [16#39,16#E2,16#83,16#A3],
        [16#30,16#E2,16#83,16#A3],
        [16#23,16#E2,16#83,16#A3],
        [16#E2,16#AC,16#86],
        [16#E2,16#AC,16#87],
        [16#E2,16#AC,16#85],
        [16#E2,16#9E,16#A1],
        [16#E2,16#86,16#97],
        [16#E2,16#86,16#96],
        [16#E2,16#86,16#98],
        [16#E2,16#86,16#99],
        [16#E2,16#97,16#80],
        [16#E2,16#96,16#B6],
        [16#E2,16#8F,16#AA],
        [16#E2,16#8F,16#A9],
        [16#F0,16#9F,16#86,16#97],
        [16#F0,16#9F,16#86,16#95],
        [16#F0,16#9F,16#94,16#9D],
        [16#F0,16#9F,16#86,16#99],
        [16#F0,16#9F,16#86,16#92],
        [16#F0,16#9F,16#8E,16#A6],
        [16#F0,16#9F,16#88,16#81],
        [16#F0,16#9F,16#93,16#B6],
        [16#F0,16#9F,16#88,16#B5],
        [16#F0,16#9F,16#88,16#B3],
        [16#F0,16#9F,16#89,16#90],
        [16#F0,16#9F,16#88,16#B9],
        [16#F0,16#9F,16#88,16#AF],
        [16#F0,16#9F,16#88,16#BA],
        [16#F0,16#9F,16#88,16#B6],
        [16#F0,16#9F,16#88,16#9A],
        [16#F0,16#9F,16#88,16#B7],
        [16#F0,16#9F,16#88,16#B8],
        [16#F0,16#9F,16#88,16#82],
        [16#F0,16#9F,16#9A,16#BB],
        [16#F0,16#9F,16#9A,16#B9],
        [16#F0,16#9F,16#9A,16#BA],
        [16#F0,16#9F,16#9A,16#BC],
        [16#F0,16#9F,16#9A,16#AD],
        [16#F0,16#9F,16#85,16#BF],
        [16#E2,16#99,16#BF],
        [16#F0,16#9F,16#9A,16#87],
        [16#F0,16#9F,16#9A,16#BE],
        [16#E3,16#8A,16#99],
        [16#E3,16#8A,16#97],
        [16#F0,16#9F,16#94,16#9E],
        [16#F0,16#9F,16#86,16#94],
        [16#E2,16#9C,16#B3],
        [16#E2,16#9C,16#B4],
        [16#F0,16#9F,16#92,16#9F],
        [16#F0,16#9F,16#86,16#9A],
        [16#F0,16#9F,16#93,16#B3],
        [16#F0,16#9F,16#93,16#B4],
        [16#F0,16#9F,16#92,16#B9],
        [16#F0,16#9F,16#92,16#B1],
        [16#E2,16#99,16#88],
        [16#E2,16#99,16#89],
        [16#E2,16#99,16#8A],
        [16#E2,16#99,16#8B],
        [16#E2,16#99,16#8C],
        [16#E2,16#99,16#8D],
        [16#E2,16#99,16#8E],
        [16#E2,16#99,16#8F],
        [16#E2,16#99,16#90],
        [16#E2,16#99,16#91],
        [16#E2,16#99,16#92],
        [16#E2,16#99,16#93],
        [16#E2,16#9B,16#8E],
        [16#F0,16#9F,16#94,16#AF],
        [16#F0,16#9F,16#85,16#B0],
        [16#F0,16#9F,16#85,16#B1],
        [16#F0,16#9F,16#86,16#8E],
        [16#F0,16#9F,16#85,16#BE],
        [16#F0,16#9F,16#94,16#B2],
        [16#F0,16#9F,16#94,16#B4],
        [16#F0,16#9F,16#94,16#B3],
        [16#F0,16#9F,16#95,16#9B],
        [16#F0,16#9F,16#95,16#90],
        [16#F0,16#9F,16#95,16#91],
        [16#F0,16#9F,16#95,16#92],
        [16#F0,16#9F,16#95,16#93],
        [16#F0,16#9F,16#95,16#94],
        [16#F0,16#9F,16#95,16#95],
        [16#F0,16#9F,16#95,16#96],
        [16#F0,16#9F,16#95,16#97],
        [16#F0,16#9F,16#95,16#98],
        [16#F0,16#9F,16#95,16#99],
        [16#F0,16#9F,16#95,16#9A],
        [16#E2,16#AD,16#95],
        [16#E2,16#9D,16#8C],
        [16#C2,16#A9],
        [16#C2,16#AE],
        [16#E2,16#84,16#A2],
        [16#F0,16#9F,16#8F,16#A0],
        [16#F0,16#9F,16#8F,16#AB],
        [16#F0,16#9F,16#8F,16#A2],
        [16#F0,16#9F,16#8F,16#A3],
        [16#F0,16#9F,16#8F,16#A5],
        [16#F0,16#9F,16#8F,16#A6],
        [16#F0,16#9F,16#8F,16#AA],
        [16#F0,16#9F,16#8F,16#A9],
        [16#F0,16#9F,16#8F,16#A8],
        [16#F0,16#9F,16#92,16#92],
        [16#E2,16#9B,16#AA],
        [16#F0,16#9F,16#8F,16#AC],
        [16#F0,16#9F,16#8C,16#87],
        [16#F0,16#9F,16#8C,16#86],
        [16#F0,16#9F,16#8F,16#A7],
        [16#F0,16#9F,16#8F,16#AF],
        [16#F0,16#9F,16#8F,16#B0],
        [16#E2,16#9B,16#BA],
        [16#F0,16#9F,16#8F,16#AD],
        [16#F0,16#9F,16#97,16#BC],
        [16#F0,16#9F,16#97,16#BB],
        [16#F0,16#9F,16#8C,16#84],
        [16#F0,16#9F,16#8C,16#85],
        [16#F0,16#9F,16#8C,16#83],
        [16#F0,16#9F,16#97,16#BD],
        [16#F0,16#9F,16#8C,16#88],
        [16#F0,16#9F,16#8E,16#A1],
        [16#E2,16#9B,16#B2],
        [16#F0,16#9F,16#8E,16#A2],
        [16#F0,16#9F,16#9A,16#A2],
        [16#F0,16#9F,16#9A,16#A4],
        [16#E2,16#9B,16#B5],
        [16#E2,16#9C,16#88],
        [16#F0,16#9F,16#9A,16#80],
        [16#F0,16#9F,16#9A,16#B2],
        [16#F0,16#9F,16#9A,16#99],
        [16#F0,16#9F,16#9A,16#97],
        [16#F0,16#9F,16#9A,16#95],
        [16#F0,16#9F,16#9A,16#8C],
        [16#F0,16#9F,16#9A,16#93],
        [16#F0,16#9F,16#9A,16#92],
        [16#F0,16#9F,16#9A,16#91],
        [16#F0,16#9F,16#9A,16#9A],
        [16#F0,16#9F,16#9A,16#83],
        [16#F0,16#9F,16#9A,16#89],
        [16#F0,16#9F,16#9A,16#84],
        [16#F0,16#9F,16#9A,16#85],
        [16#F0,16#9F,16#8E,16#AB],
        [16#E2,16#9B,16#BD],
        [16#F0,16#9F,16#9A,16#A5],
        [16#E2,16#9A,16#A0],
        [16#F0,16#9F,16#9A,16#A7],
        [16#F0,16#9F,16#94,16#B0],
        [16#F0,16#9F,16#8E,16#B0],
        [16#F0,16#9F,16#9A,16#8F],
        [16#F0,16#9F,16#92,16#88],
        [16#E2,16#99,16#A8],
        [16#F0,16#9F,16#8F,16#81],
        [16#F0,16#9F,16#8E,16#8C],
        [16#F0,16#9F,16#87,16#AF,16#F0,16#9F,16#87,16#B5],
        [16#F0,16#9F,16#87,16#B0,16#F0,16#9F,16#87,16#B7],
        [16#F0,16#9F,16#87,16#A8,16#F0,16#9F,16#87,16#B3],
        [16#F0,16#9F,16#87,16#BA,16#F0,16#9F,16#87,16#B8],
        [16#F0,16#9F,16#87,16#AB,16#F0,16#9F,16#87,16#B7],
        [16#F0,16#9F,16#87,16#AA,16#F0,16#9F,16#87,16#B8],
        [16#F0,16#9F,16#87,16#AE,16#F0,16#9F,16#87,16#B9],
        [16#F0,16#9F,16#87,16#B7,16#F0,16#9F,16#87,16#BA],
        [16#F0,16#9F,16#87,16#AC,16#F0,16#9F,16#87,16#A7],
        [16#F0,16#9F,16#87,16#A9,16#F0,16#9F,16#87,16#AA]
    ]).
